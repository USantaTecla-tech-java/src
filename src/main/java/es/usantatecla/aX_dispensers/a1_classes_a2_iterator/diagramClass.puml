@startuml

interface Dispenser {
	void add(Interval interval)
	Interval remove()
	boolean isEmpty()
	Iterator getIterator()
}

Dispenser .down.> Iterator

abstract class BoundedDisepenser implements Dispenser {
	Interval[] intervals
	int size
	int next
	BoundedDisepenser(int size)
	void add(Interval interval)
	boolean isEmpty()
	boolean isFull()
}

BoundedDisepenser *-down-> Interval

class BoundedQueue extends BoundedDisepenser {
	int first;
	BoundedQueue(int size)
	void add(Interval interval) 
	Interval remove()
}

class BoundedStack extends BoundedDisepenser {
	BoundedStack(int tamaÃ±o)
	Interval remove()
	Iterator getIterator()
}

interface Iterator {
	boolean hasNext()
  Interval next()
}

Iterator .down.> Interval

class Interval {
	double minimo
	double maximo
	double getMinimo() 
	double getMaximo()
	Interval(double minimo, double maximo)
	Interval()
	Interval(Interval intervalo)
	double longitud()
	double puntoMedio()
	Interval copia()
	Interval simetrico()
	void desplazar(double cantidad)
	void escalar(double escala) 
	boolean incluye(double punto)
	boolean incluye(Interval intervalo)
	boolean iguales(Interval intervalo) 
	Interval interseccion(Interval intervalo)
	Interval desplazado(double cantidad) 
	void recoger()
	String toString()
}

abstract class BoundedDispenserIterator implements Iterator {
	Interval[] intervals
	int size
	int current
	BoundedDispenserIterator(Interval[] intervals, int size, int current)
	boolean hasNext()
	{abstract} Interval next()
}

class BoundedQueueIterator extends BoundedDispenserIterator {
	BoundedQueueIterator(Interval[] intervals, int size, int first) 
	Interval next() 
}

BoundedQueue ..> BoundedQueueIterator

class BoundedStackIterator extends BoundedDispenserIterator {
	BoundedStackIterator(Interval[] intervals, int size, int next) 
	Interval next() 
}

BoundedStack ..> BoundedStackIterator

abstract class UnboundedDispenser implements Dispenser {
	Node entrance
	UnboundedDispenser()
	void add(Interval interval)
	boolean isEmpty()
}

class Node extends Interval {
	Node previous;
	Node next;
	Node(Node previous, Interval interval, Node next)
	Node getPrevious()
	Node getNext()
	void setPrevious(Node previous) 
	void setNext(Node next)
	Interval getInterval()
}

UnboundedDispenser *-down-> Node

class UnboundedQueue extends UnboundedDispenser {
	Node exit;
	UnboundedQueue()
	void add(Interval interval)
	Interval remove()
	Iterator getIterator()
}

class UnboundedStack extends UnboundedDispenser {
	Interval remove() 
	Iterator getIterator()
}

abstract class UnboundedDispenserIterator implements Iterator {
	Node current;
	UnboundedDispenserIterator(Node current) 
	boolean hasNext()
	{abstract} Interval next()
}

UnboundedDispenserIterator .down.> Node

class UnboundedQueueIterator extends UnboundedDispenserIterator {
	UnboundedQueueIterator(Node current)
	Interval next()
}

UnboundedQueue .down.> UnboundedQueueIterator

class UnboundedStackIterator extends UnboundedDispenserIterator {
	UnboundedStackIterator(Node actual)
	Interval next()
}

UnboundedStack .down.> UnboundedStackIterator
@enduml